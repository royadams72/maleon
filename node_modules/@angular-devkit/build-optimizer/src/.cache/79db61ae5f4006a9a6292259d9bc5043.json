{"remainingRequest":"/Users/royadams/Google Drive/_WORK/ma-leon/angular_app/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/royadams/Google Drive/_WORK/ma-leon/angular_app/node_modules/ngx-page-scroll/src/ngx-page-scroll.directive.js","dependencies":[{"path":"/Users/royadams/Google Drive/_WORK/ma-leon/angular_app/node_modules/ngx-page-scroll/src/ngx-page-scroll.directive.js","mtime":1526906820587},{"path":"/Users/royadams/Google Drive/_WORK/ma-leon/angular_app/node_modules/cache-loader/dist/cjs.js","mtime":1526906783979},{"path":"/Users/royadams/Google Drive/_WORK/ma-leon/angular_app/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["'use strict';\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.PageScroll = undefined;\nvar _core = require('@angular/core');\nvar _router = require('@angular/router');\nvar _common = require('@angular/common');\nvar _ngxPageScroll = require('./ngx-page-scroll.service');\nvar _ngxPageScrollInstance = require('./ngx-page-scroll-instance');\nvar _ngxPageScrollUtil = require('./ngx-page-scroll-util.service');\nvar PageScroll = function () {\n    function PageScroll(pageScrollService, router, document) {\n        this.pageScrollService = pageScrollService;\n        this.router = router;\n        this.pageScrollTarget = null;\n        this.pageScrollHorizontal = null;\n        this.pageScrollOffset = null;\n        this.pageScrollDuration = null;\n        this.pageScrollSpeed = null;\n        this.pageScrollEasing = null;\n        this.pageScrollAdjustHash = false;\n        this.pageScroll = null;\n        this.pageScrollFinish = new _core.EventEmitter();\n        this.document = document;\n    }\n    PageScroll.prototype.ngOnChanges = function (changes) {\n        // Some inputs changed, reset the pageScrollInstance\n        this.pageScrollInstance = undefined;\n    };\n    PageScroll.prototype.ngOnDestroy = function () {\n        if (this.pageScrollInstance) {\n            this.pageScrollService.stop(this.pageScrollInstance);\n        }\n        return undefined;\n    };\n    PageScroll.prototype.generatePageScrollInstance = function () {\n        if (_ngxPageScrollUtil.PageScrollUtilService.isUndefinedOrNull(this.pageScrollInstance)) {\n            this.pageScrollInstance = _ngxPageScrollInstance.PageScrollInstance.newInstance({\n                document: this.document,\n                scrollTarget: this.pageScrollTarget || this.href,\n                scrollingViews: null,\n                namespace: this.pageScroll,\n                verticalScrolling: !this.pageScrollHorizontal,\n                pageScrollOffset: this.pageScrollOffset,\n                pageScrollInterruptible: this.pageScrollInterruptible,\n                pageScrollEasingLogic: this.pageScrollEasing,\n                pageScrollDuration: this.pageScrollDuration,\n                pageScrollSpeed: this.pageScrollSpeed,\n                pageScrollFinishListener: this.pageScrollFinish\n            });\n        }\n        return this.pageScrollInstance;\n    };\n    PageScroll.prototype.pushRouterState = function () {\n        if (this.pageScrollAdjustHash && typeof this.pageScrollInstance.scrollTarget === 'string' && this.pageScrollInstance.scrollTarget.substr(0, 1) === '#') {\n            // \"Navigate\" to the current route again and this time set the fragment/hash\n            this.router.navigate([], {\n                fragment: this.pageScrollInstance.scrollTarget.substr(1),\n                preserveQueryParams: true\n            });\n        }\n    };\n    PageScroll.prototype.scroll = function () {\n        var pageScrollInstance = this.generatePageScrollInstance();\n        this.pushRouterState();\n        this.pageScrollService.start(pageScrollInstance);\n    };\n    PageScroll.prototype.handleClick = function (clickEvent) {\n        var _this = this;\n        if (this.routerLink && this.router !== null && this.router !== undefined) {\n            var urlTree = void 0;\n            if (typeof this.routerLink === 'string') {\n                urlTree = this.router.parseUrl(this.routerLink);\n            }\n            else {\n                urlTree = this.router.createUrlTree(this.routerLink);\n            }\n            if (!this.router.isActive(urlTree, true)) {\n                // We need to navigate their first.\n                // Navigation is handled by the routerLink directive\n                // so we only need to listen for route change\n                var subscription_1 = this.router.events.subscribe(function (routerEvent) {\n                    if (routerEvent instanceof _router.NavigationEnd) {\n                        subscription_1.unsubscribe();\n                        // use a timeout to start scrolling as soon as the stack is cleared\n                        setTimeout(function () {\n                            _this.scroll();\n                        }, 0);\n                    }\n                    else if (routerEvent instanceof _router.NavigationError || routerEvent instanceof _router.NavigationCancel) {\n                        subscription_1.unsubscribe();\n                    }\n                });\n                return false; // to preventDefault()\n            }\n        }\n        this.scroll();\n        return false; // to preventDefault()\n    };\n    PageScroll.decorators = [{ type: _core.Directive, args: [{\n                    selector: '[pageScroll]',\n                    host: {\n                        '(click)': 'handleClick($event)'\n                    }\n                }] }];\n    PageScroll.propDecorators = {\n        'routerLink': [{ type: _core.Input }],\n        'href': [{ type: _core.Input }],\n        'pageScrollTarget': [{ type: _core.Input }],\n        'pageScrollHorizontal': [{ type: _core.Input }],\n        'pageScrollOffset': [{ type: _core.Input }],\n        'pageScrollDuration': [{ type: _core.Input }],\n        'pageScrollSpeed': [{ type: _core.Input }],\n        'pageScrollEasing': [{ type: _core.Input }],\n        'pageScrollInterruptible': [{ type: _core.Input }],\n        'pageScrollAdjustHash': [{ type: _core.Input }],\n        'pageScroll': [{ type: _core.Input }],\n        'pageScrollFinish': [{ type: _core.Output }]\n    };\n    return PageScroll;\n}();\nexports.PageScroll = PageScroll;\n",null]}