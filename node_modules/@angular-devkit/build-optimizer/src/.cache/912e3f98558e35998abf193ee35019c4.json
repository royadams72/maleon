{"remainingRequest":"/Users/royadams/Google Drive/_WORK/ma-leon/angular_app/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/royadams/Google Drive/_WORK/ma-leon/angular_app/node_modules/rxjs/operator/skipUntil.js","dependencies":[{"path":"/Users/royadams/Google Drive/_WORK/ma-leon/angular_app/node_modules/rxjs/operator/skipUntil.js","mtime":1523558820000},{"path":"/Users/royadams/Google Drive/_WORK/ma-leon/angular_app/node_modules/cache-loader/dist/cjs.js","mtime":1526906783979},{"path":"/Users/royadams/Google Drive/_WORK/ma-leon/angular_app/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nvar skipUntil_1 = require('../operators/skipUntil');\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nfunction skipUntil(notifier) {\n    return skipUntil_1.skipUntil(notifier)(this);\n}\nexports.skipUntil = skipUntil;\n//# sourceMappingURL=skipUntil.js.map",null]}